/// # The direct style Plugin {#direct}
///
/// @see thorin::direct
///
/// [TOC]
///
/// This plugin has two operating phases:
/// 1. ds2cps: Convert direct style functions to CPS functions.
///    This transformation changes the type signature and wraps the body in a return.
///    Replace all callee occurrences (call sites) with a wrapped call using the `cps2ds` axiom.
/// 2. cps2ds: Replace calls to the `cps2ds` axiom with cps style continuations.
///   For each call, a new continuation is created and the function call continues in the new function.
///
/// ## Dependencies
///
.import compile;
///
/// ## Operations
///
/// ### %direct.cps2ds
///
/// This axiom lets the user call a cps function in direct style.
/// The function is not converted. Only the call site is changed.
///
.ax %direct.cps2ds: Π [T: *, U: *] -> .Cn [T, .Cn U] -> (T -> U), normalize_cps2ds, 2;
.ax %direct.cps2ds_dep: Π [T: *, U: T -> *] -> .Cn [t: T, .Cn U t] -> [Π [t:T] -> U t], 2;
///
/// ## Passes and Phases
///
/// ### Passes
///
.ax %direct.ds2cps_pass: %compile.Pass;
.ax %direct.cps2ds_pass: %compile.Pass;
///
/// ### Phases
///
.let direct_phases = {
  %compile.combined_phase (%compile.phase_list
    (%compile.single_pass_phase %direct.ds2cps_pass)
    (%compile.single_pass_phase %direct.cps2ds_pass)
    optimization_phase
  )
};
